#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset

# For backward compatibility, allow both PG* and POSTGRES_* forms,
# with the non-standard POSTGRES_* form taking precedence.
# An error will be raised if neither form is given, except for the PGPORT
export PGHOST="127.0.0.1"
export PGDATABASE="osm"
export PGUSER="docker"
export PGPASSWORD="docker"
export PGPORT="25432"
export SQL_TOOLS_DIR="sql"
export SQL_DIR="sql"
export IMPOSM_MAPPING_FILE="mapping.yaml"
export PBF_DATA_DIR="file"
export IMPOSM_DIFF_DIR="diff"
export IMPOSM_CACHE_DIR="cache"
export IMPOSM_CONFIG_FILE="config/repl_config.json"

: "${DIFF_MODE:=true}"
: "${APPEND_MODE:=false}"


function import_pbf() {
    local pbf_file="$1"

    local extra_flags=""
    local action_msg=""
    local mode_msg=""

    if [ "$DIFF_MODE" = true ]; then
        extra_flags="$extra_flags -diff"
        mode_msg="DIFF"
    else
        mode_msg="NORMAL"
    fi

    if [ "$APPEND_MODE" = true ]; then
        extra_flags="$extra_flags -appendcache"
        action_msg="Appending"
    else
        extra_flags="$extra_flags -overwritecache"
        action_msg="Importing"
    fi

   
   
}

function import_osm_with_first_pbf() {
    if [[ -z "${1:-}" ]]; then
      # With no parameters, import the first found PBF file in the $PBF_DATA_DIR
      echo "Searching for any *.pbf files in $PBF_DATA_DIR"
      if [ "$(ls -A "${PBF_DATA_DIR:?}"/*.pbf 2> /dev/null)" ]; then
          local pbf_file
          for pbf_file in "$PBF_DATA_DIR"/*.pbf; do
            echo "import_pbf $pbf_file "
              import_pbf "$pbf_file"
              #break
          done
      else
          echo "No PBF files for import found."
          echo "Please mount the $PBF_DATA_DIR volume to a folder containing OSM PBF files,"
          echo "or provide PBF file as the first parameter to import-osm"
          exit 1
      fi
    else
      echo "Importing provided file $1"
      import_pbf "$1"
    fi
}

import_osm_with_first_pbf "${1:-}"
